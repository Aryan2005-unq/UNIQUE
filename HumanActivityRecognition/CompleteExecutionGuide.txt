# Complete HAR System Execution Guide

## Your Complete File Structure âœ…

```
HAR_Project/
â”œâ”€â”€ har_system.py              # AI Model Training
â”œâ”€â”€ app.py                     # Flask API Server  
â”œâ”€â”€ ActivityPredictionScreen.js # React Native Mobile App
â”œâ”€â”€ HAR_test.csv              # Dataset
â””â”€â”€ models/                   # (Created automatically)
    â”œâ”€â”€ ctgan_model.pkl
    â”œâ”€â”€ hybrid_model.h5
    â”œâ”€â”€ scaler.pkl
    â”œâ”€â”€ label_encoder.pkl
    â””â”€â”€ feature_columns.json
```

## Phase 1: Backend Setup (VSCode)

### Step 1: Install Python Dependencies
```bash
pip install pandas numpy scikit-learn tensorflow ctgan flask flask-cors joblib
```

### Step 2: Train AI Models (First Time Only)
```bash
# In VSCode terminal
python har_system.py
```
**Expected Output:**
```
Loading and preparing data...
Training GAN on sensor features...
GAN training completed!
Training hybrid model...
Hybrid model training completed!
All models saved to models/
ðŸš€ SYSTEM READY!
```
**Time:** 10-30 minutes

### Step 3: Start API Server
```bash
# In VSCode terminal (keep this running)
python app.py
```
**Expected Output:**
```
âœ… GAN model loaded successfully
âœ… Hybrid model loaded successfully
âœ… Preprocessors loaded successfully
* Running on http://127.0.0.1:5000
```

### Step 4: Test API (Optional)
Open browser: `http://127.0.0.1:5000/api/health`
Should see: `{"status": "healthy", "models_loaded": true}`

## Phase 2: Mobile App Setup

### Step 1: Install React Native
```bash
# Install Node.js first, then:
npm install -g react-native-cli
npx react-native init HARMobileApp
cd HARMobileApp
```

### Step 2: Install Mobile Dependencies
```bash
npm install react-native-chart-kit react-native-svg
# For iOS
cd ios && pod install && cd ..
```

### Step 3: Add Your Screen
Replace the contents of `App.js` with:

```javascript
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import ActivityPredictionScreen from './ActivityPredictionScreen';

const App = () => {
  return (
    <NavigationContainer>
      <ActivityPredictionScreen />
    </NavigationContainer>
  );
};

export default App;
```

Copy your `ActivityPredictionScreen.js` file into the React Native project folder.

### Step 4: Fix API URL
In `ActivityPredictionScreen.js`, change this line:
```javascript
// Change from:
const API_BASE_URL = 'http://your-backend-url.com/api';

// To (find your computer's IP):
const API_BASE_URL = 'http://YOUR_COMPUTER_IP:5000/api';
```

**To find your IP:**
- Windows: `ipconfig` (look for IPv4)
- Mac/Linux: `ifconfig` (look for inet)
- Example: `http://192.168.1.100:5000/api`

## Phase 3: Run Everything Together

### Terminal 1 (VSCode - Backend):
```bash
python app.py
# Keep this running - your API server
```

### Terminal 2 (React Native - Frontend):
```bash
# Android
npx react-native run-android

# OR iOS  
npx react-native run-ios
```

## Complete User Flow ðŸŽ‰

1. **User opens mobile app** on phone/emulator
2. **User sees**: "HAR System Demo" screen
3. **User taps**: "ðŸŽ² Generate Data & Predict Activities" button
4. **App shows**: "Generating Data..." loading
5. **Behind scenes**: 
   - Mobile app â†’ Flask API 
   - Flask API â†’ GAN generates sensor data
   - Flask API â†’ CNN-LSTM predicts activities
   - Flask API â†’ sends results back
6. **User sees**:
   - ðŸ“± Generated sensor data table
   - ðŸŽ¯ Activity predictions with confidence scores
   - ðŸ“Š Summary statistics

## Troubleshooting

### Backend Issues:
```bash
# If models not found
python har_system.py  # Retrain models

# If API not starting
pip install flask flask-cors  # Reinstall dependencies

# Test API manually
curl http://127.0.0.1:5000/api/health
```

### Mobile App Issues:
```bash
# If app won't build
npx react-native doctor  # Check setup

# If can't connect to API
# Make sure both devices are on same WiFi
# Use computer's IP, not localhost

# Clear cache
npx react-native start --reset-cache
```

### Connection Issues:
- **Mobile app can't reach API**: Use computer's IP address, not `localhost`
- **Firewall blocking**: Allow port 5000 through Windows/Mac firewall
- **Different networks**: Ensure phone and computer on same WiFi

## Expected Results

When everything works, user will see:

### Generated Sensor Data:
```
Timestamp    Acc_X   Acc_Y   Acc_Z   Gyro_X  Gyro_Y  Gyro_Z
10:30:01    0.142   -0.891   9.756   0.023   -0.156   0.089
10:30:02    0.234   -0.923   9.834   0.034   -0.167   0.076
...
```

### Activity Predictions:
```
Sample 1: WALKING (87.3% confidence)
Sample 2: WALKING (91.2% confidence)
Sample 3: SITTING (76.8% confidence)
...

Summary:
Most Common Activity: WALKING
Average Confidence: 85.1%
```

## Development Workflow

### Daily Development:
1. Start backend: `python app.py` (in VSCode)
2. Start mobile app: `npx react-native run-android`
3. Test changes in real-time

### First Time Only:
1. Train models: `python har_system.py`
2. Setup React Native project
3. Configure IP addresses

## Production Deployment

### Backend (Cloud):
```bash
# Deploy Flask API to cloud (Heroku, AWS, etc.)
# Update API_BASE_URL in mobile app
```

### Mobile App:
```bash
# Build APK for Android
cd android && ./gradlew assembleRelease

# Build for iOS App Store
# Use Xcode
```

## File Purposes Summary:

- **`har_system.py`**: Trains AI models (run once)
- **`app.py`**: Serves API endpoints (keep running)  
- **`ActivityPredictionScreen.js`**: Mobile UI (user interface)
- **`HAR_test.csv`**: Training data

## Next Steps:

1. âœ… **Train models**: `python har_system.py`
2. âœ… **Start API**: `python app.py` 
3. ðŸ”„ **Setup React Native project**
4. ðŸ”„ **Configure IP address in mobile app**
5. ðŸ”„ **Run mobile app**: `npx react-native run-android`
6. ðŸŽ‰ **Test end-to-end workflow**

The magic happens when user taps the button - your GAN creates realistic sensor data, and your CNN-LSTM model predicts what activity that data represents!
